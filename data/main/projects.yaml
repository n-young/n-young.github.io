projects:
    - title: TRustDB
      subtitle: Timeseries Database for High-cardinality Data.
      icon: img/icons/tsdb.png
      icon-alt: tsdb-icon
      content: |
          <p>
              Built a highly performant time-series database in Rust.
              Leverages boolean logic-based query optimization to achieve
              up to 250x speedup in query evaluation, bit-level compression
              on time series records, and finite-state transducers-based
              indexing strategies to remain time- and space-efficient for incredibly
              high cardinality data. Completed as part of a research project for
              CSCI 2270 - Managing and Mining Massive Time Series.
          </p>
      link-shields:
        - link: docs/trustdb.pdf
          text: Paper
        - link: https://github.com/n-young/trustdb
          text: Repo
      lang-shields:
        - text: Rust

    - title: Goo
      subtitle: Minimal Sitebuilding using YAML and Markdown.
      icon: img/icons/goo.png
      icon-alt: goo-icon
      content: |
          <p>
              Designed and built a static site generator that uses YAML and Markdown
              files to specify and generate the structure of the website. Supports
              partials, data injection, inline math, :joy:-like emojis, and much more.
          </p>
      link-shields:
        - link: https://github.com/n-young/goo
          text: Repo
      lang-shields:
        - text: Go

    - title: Gomoku
      subtitle: Connect Five!
      icon: img/icons/gomoku.png
      icon-alt: gomoku-icon
      content: |
          <p>
              Built a Gomoku app using React, Express, and Socket.io.
              Features include multiplayer, chat, and win detection.
          </p>
      link-shields:
        - link: https://gomoku.n-young.me
          text: Play!
        - link: https://github.com/n-young/gomoku
          text: Repo
      lang-shields:
        - text: React
        - text: Express
        - text: Socket.io

    - title: OxySAT
      subtitle: SAT Solving
      icon: img/icons/oxysat.png
      icon-alt: oxysat-icon
      content: |
          <p>
              Built a DPLL-powered SAT solver with custom heuristics to optimize satisfiability search, built in Rust, tested using an automated
              oracle built in Python. Compatible as a backend for the Forge model-checking language Completed
              as part of a project for CSCI 1710 - Logic for Systems.
          </p>
      link-shields:
        - link: https://github.com/n-young/oxysat
          text: Repo
      lang-shields:
        - text: Rust

    - title: DeepKart64
      subtitle: Mario Kart Solved?
      icon: img/icons/deepkart64.png
      icon-alt: deepkart64-icon
      content: |
          <p>
              Designed and implemented DeepKart64, a reinforcement
              learning model built to play Mario Kart 64 on the N64.
              Used a pre-build Mario Kart 64 OpenAI gym wrapper
              alongside Tensorflow to build the agent. The model
              utilized a convolutional encoder to interpret the visual
              game state and a REINFORCE with baseline model to
              determine actions and rewards.
          </p>
          <p>
              Completed as part of a final project for CSCI 1470 -
              Deep Learning at Brown University. Worked with three
              other team members. Primarily contributed to development
              setup, model tweaking, and command line integrations.
          </p>
      link-shields:
        - link: https://github.com/n-young/deepkart64
          text: Repo
      lang-shields:
        - text: Tensorflow
        - text: Python
        - text: Docker
        - text: GCP

    - title: Droppy
      subtitle: File sharing simplified.
      icon: img/icons/droppy.png
      icon-alt: droppy-icon
      content: |
          <p>
              Developed Droppy, a quick and easy way of sharing files
              securely. Simply upload a file, and optionally attach a
              note, an expiration date, or a password, then
              autogenerate a link to share the files with others!
          </p>
          <p>
              Implemented the front end in React. The back end was
              built with Rust using Rocket. Files are stored in AWS
              S3, metadata is stored seperately in MongoDB. Deployed
              on Netlify and GCP.
          </p>
      link-shields:
        - link: https://droppy.n-young.me
          text: Demo
        - link: https://github.com/n-young/droppy
          text: Repo
      lang-shields:
        - text: Rust
        - text: React
        - text: GCP
        - text: AWS
        - text: MongoDB

    - title: ParselTongue
      subtitle: Smart paper parsing.
      icon: img/icons/parseltongue.png
      icon-alt: parseltongue-icon
      content: |
          <p>
              Built ParselTongue, an academic paper skimmer, as a
              final project for CSCI 0320 - Software Engineering. With
              just a few keywords, ParselTongue finds the most salient
              parts of academic papers to your described topics,
              saving countless hours of research.
          </p>
          <p>
              Implemented the front end using Freemarker templates,
              and used Java and Apache Spark for user validation,
              persistence, and data handling. Database was implemented
              in MongoDB. Back end relies on the PageRank algorithm to
              search PDFs for semantic covariance.
          </p>
      link-shields:
        - link: https://parseltongue-cs32.herokuapp.com/
          text: Demo
      lang-shields:
        - text: Java
        - text: Javascript
        - text: HTML/CSS
        - text: MongoDB

    - title: LinguaML
      subtitle: '"On the go" language learning.'
      icon: img/icons/linguaml.png
      icon-alt: linguaml-icon
      content: |
          <p>
              LinguaML is a computer-vision powered language learning
              app designed for on-the-go learners. With just a picture
              of your subject, flashcards for any language are
              generated within seconds and saved in the app. You can
              view, study, edit, and share flashcards with your
              friends!
          </p>
          <p>
              LinguaML was conceived and developed at Hack@Brown 2020.
              It won the Facebook award for "Best hack that builds
              community through private or small-group interaction".
          </p>
      link-shields:
        - link: https://github.com/n-young/linguaml2
          text: Repo
      lang-shields:
        - text: React Native
        - text: Node.js
        - text: Google Vision API
